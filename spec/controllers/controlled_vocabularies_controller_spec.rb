# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ControlledVocabulariesController, type: :controller do
  render_views
  # This should return the minimal set of attributes required to create a valid
  # ControlledVocabulary. As you add validations to ControlledVocabulary, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { vocabulary: 'repair_type', key: 'Wash', active: true, favorite: true }
  end

  let(:invalid_attributes) do
    { vocabulary: '', key: '', active: true }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ControlledVocabulariesController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:user) { create(:user, role: 'admin') }

  before do
    controller_login_as(user)
    controller_stub_authorization(user)
  end

  describe 'GET #index' do
    it 'returns a success response' do
      ControlledVocabulary.create! valid_attributes
      get :index, params: {}
      expect(response).to be_successful
    end

    it 'has the correct conent' do
      ControlledVocabulary.create! valid_attributes
      get :index, params: {}
      expect(response.body).to have_content('Controlled Vocabularies')
      expect(response.body).to have_content('repair_type')
      expect(response.body).to have_content('Wash')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      controlled_vocabulary = ControlledVocabulary.create! valid_attributes
      get :show, params: { id: controlled_vocabulary.to_param }
      expect(response).to be_successful
      expect(response.body).to have_content('repair_type')
      expect(response.body).to have_content('Wash')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      controlled_vocabulary = ControlledVocabulary.create! valid_attributes
      get :edit, params: { id: controlled_vocabulary.to_param }
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new ControlledVocabulary' do
        expect do
          post :create, params: { controlled_vocabulary: valid_attributes }
        end.to change(ControlledVocabulary, :count).by(1)
      end

      it 'redirects to the created controlled_vocabulary' do
        post :create, params: { controlled_vocabulary: valid_attributes }
        expect(response).to redirect_to(ControlledVocabulary.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { controlled_vocabulary: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { vocabulary: 'something', key: 'else', active: false, favorite: true }
      end

      it 'updates the requested controlled_vocabulary' do
        controlled_vocabulary = ControlledVocabulary.create! valid_attributes
        put :update, params: { id: controlled_vocabulary.to_param, controlled_vocabulary: new_attributes }
        controlled_vocabulary.reload
        expect(controlled_vocabulary.vocabulary).to eq('something')
        expect(controlled_vocabulary.key).to eq('else')
        expect(controlled_vocabulary.active).to eq(false)
        expect(controlled_vocabulary.favorite).to eq(true)
      end

      it 'redirects to the controlled_vocabulary' do
        controlled_vocabulary = ControlledVocabulary.create! valid_attributes
        put :update, params: { id: controlled_vocabulary.to_param, controlled_vocabulary: valid_attributes }
        expect(flash[:notice]).to eq('Controlled vocabulary was successfully updated.')
        expect(response).to redirect_to(controlled_vocabulary)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        controlled_vocabulary = ControlledVocabulary.create! valid_attributes
        put :update, params: { id: controlled_vocabulary.to_param, controlled_vocabulary: invalid_attributes }
        expect(response).to be_successful
        expect(response).to render_template(:edit)
        expect(response.body).to have_content("Vocabulary can't be blank")
        expect(response.body).to have_content("Key can't be blank")
      end
    end
  end
end
