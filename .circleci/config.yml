version: 2.1

executors:
  default-executor:
    docker:
      - image: cimg/ruby:3.3.3
    environment:
      BUNDLE_PATH: vendor/bundle
      BUNDLE_JOBS: 4
      BUNDLE_RETRY: 3
      RAILS_ENV: test
      RACK_ENV: test

orbs:
  ruby: circleci/ruby@2.1.1
  browser-tools: circleci/browser-tools@1.4.7
  coveralls: coveralls/coveralls@1.0.6

jobs:
  build:
    executor: default-executor
    parallelism: 4
    working_directory: ~/treatment_database
    steps:
      - checkout
      - browser-tools/install-browser-tools

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"

      - run:
          name: Install NVM and Node.js
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --install' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> $BASH_ENV
            source $BASH_ENV
            nvm install $(cat .nvmrc)
            nvm use $(cat .nvmrc)
            echo "Node Version Manager (NVM) installed successfully."
            echo "NVM version: $(nvm --version)"
            echo "Node.js version: $(node --version)"

      - run:
          name: Install Yarn
          command: |
            source $BASH_ENV
            nvm use
            npm install -g yarn
            echo "Yarn installed successfully."
            echo "Yarn version: $(yarn --version)"

      - run:
          name: Install Gemfile Dependencies
          no_output_timeout: 15m
          shell: /bin/bash -eo pipefail
          command: |
            source $BASH_ENV
            nvm use
            echo "Installing Ruby gems..."
            bundle install --jobs=4 --retry=3

      - run:
          name: Install Yarn Dependencies
          command: |
            echo "Installing Yarn dependencies..."
            source $BASH_ENV
            nvm use
            yarn install

      - run:
          name: Run Yarn Build
          command: |
            echo "Running Yarn build..."
            source $BASH_ENV
            nvm use
            yarn build

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Ensure coverage directory exists before persisting it
      - run:
          name: Ensure coverage directory exists
          command: mkdir -p ~/treatment_database/coverage

      # Log contents of the workspace before persisting
      - run:
          name: List coverage directory contents
          command: ls -la ~/treatment_database/coverage

      # Persist coverage and scripts directory to workspace
      - persist_to_workspace:
          root: ~/treatment_database
          paths:
            - coverage/
            - scripts/  # Ensure the scripts directory is persisted

  merge_coverage:
    executor: default-executor
    steps:
      - attach_workspace:
          at: ~/treatment_database

      # Check that the scripts directory is present
      - run:
          name: Check for merge_coverage script
          command: ls -la ~/treatment_database/scripts

      # Merge coverage results
      - run:
          name: Merge coverage results
          command: |
            cd ~/treatment_database
            ruby scripts/merge_coverage.rb

      # Upload coverage results to Coveralls
      - coveralls/upload:
          parallel: true
          path_to_lcov: ~/treatment_database/coverage/lcov/lcov.info

workflows:
  version: 2
  ci:
    jobs:
      - build
      - merge_coverage:
          requires:
            - build
