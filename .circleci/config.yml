# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2
  aws-ecs: circleci/aws-ecs@2
  aws-ecr: circleci/aws-ecr@7
  aws-s3: circleci/aws-s3@2
  aws-eks: circleci/aws-eks@1
  ruby: circleci/ruby@1
  node: circleci/node@4
  browser-tools: circleci/browser-tools@1

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: treatment-database-app
      AWS_RESOURCE_NAME_PREFIX: treatment-database-app
    docker:
      - image: docker:20.10.7-git

jobs:
  build:
    machine:
      image: ubuntu-2004:202010-01

    environment:
      BUNDLE_PATH: vendor/bundle
      BUNDLE_JOBS: 4
      BUNDLE_RETRY: 3
      RAILS_ENV: test
      RACK_ENV: test
      SPEC_OPTS: --profile 10 --format RspecJunitFormatter --out /tmp/test-results/rspec.xml --format progress
      WORKING_PATH: /tmp
      UPLOAD_PATH: /tmp
      CACHE_PATH: /tmp/cache
      COVERALLS_PARALLEL: true

    steps:
      - checkout

      - run:
          name: Get Ruby Version
          command: echo "export RUBY_VERSION=$(cat .ruby-version | awk -F '-' '{ print $2 }')" >> $BASH_ENV

      - browser-tools/install-browser-tools

      - node/install:
          install-yarn: true

      - ruby/install:
          version: ${RUBY_VERSION}

      - run:
          name: Check Versions
          command: |
            java -version
            google-chrome --version
            firefox --version
            geckodriver --version
            chromedriver --version
            node -v
            npm -v

      - ruby/install-deps

      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y xvfb libfontconfig wkhtmltopdf

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          name: Rubocop
          command: |
            gem install rubocop
            bundle exec rubocop --require rubocop-rails

      - ruby/rspec-test

      - store_artifacts:
          path: coverage

      - deploy:
          name: Update Coveralls
          command: |
            curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_BUILD_NUM&payload[status]=done"

  build-image:
    working_directory: ~/treatment_database
    executor: docker-publisher

    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/image.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/image.tar | true

      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=${IMAGE_NAME} -t ${IMAGE_NAME}:latest --build-arg RAILS_MASTER_KEY --build-arg RUBY_VERSION="$(cat .ruby-version | awk -F  '-' '{print $2}')" -f docker/Dockerfile .

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/image.tar ${IMAGE_NAME}:latest

      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/image.tar

      - persist_to_workspace:
          root: /caches
          paths:
            - ./image.tar

  publish-image:
    executor: docker-publisher

    environment:
      AWS_DEFAULT_REGION: us-east-2

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar

      - run:
          name: Publish Docker Image to ECR
          command: |
            IMAGE_TAG=$(echo $CIRCLE_TAG | cut -c 2-)
            : "${IMAGE_TAG:=$(echo $CIRCLE_SHA1 | cut -c -7)}"
            : "${IMAGE_TAG:=latest}"
            alias aws='docker run --rm -it -e AWS_ACCESS_KEY_ID -e AWS_DEFAULT_REGION -e AWS_SECRET_ACCESS_KEY amazon/aws-cli'
            aws ecr get-login-password | cut -c5- | docker login --username AWS --password-stdin ${ECR_ENDPOINT}
            docker tag ${IMAGE_NAME}:latest "${ECR_ENDPOINT}/${IMAGE_NAME}:$IMAGE_TAG"
            docker push "${ECR_ENDPOINT}/${IMAGE_NAME}:$IMAGE_TAG"

  deploy-ecs:
    executor: aws-cli/default
#    docker:
#      # https://circleci.com/docs/2.0/circleci-images/
#      - image: aws-cli/default
##      - image: cimg/python:3.9.1
#        environment:
#          AWS_RESOURCE_NAME_PREFIX: treatment-database-app

    steps:

      - checkout
      - aws-cli/setup
      - setup_remote_docker

      - aws-ecr/build-and-push-image:
          account-url: ECR_ENDPOINT
          region: AWS_REGION
          repo: "treatment-database-app"
          tag: "${CIRCLE_SHA1}"

      - aws-ecs/update-service:
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"

#      - aws-ecr/build-and-push-image:
#          repo: "${AWS_RESOURCE_NAME_PREFIX}"
#          tag: "${CIRCLE_SHA1}"

#      - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
#          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
#          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
#          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"

workflows:
  version: 2
  ci:
    jobs:
      - build

      - build-image:
          requires:
            - build

      - publish-image:
          requires:
            - build-image
          filters:
            branches:
              only: qa

      - deploy-ecs:
          requires:
            - publish-image
          filters:
            branches:
              only: qa

#      - deploy-qa:
#          name: deploy-ecs
#          filters:
#            branches:
#              only: /pre-prod(?:-.+)?$/
#
#      - deploy-prod:
#          name: deploy-ecs
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
  build-and-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: ECR_ENDPOINT
          region: AWS_REGION
          repo: '${MY_APP_PREFIX}'
          tag: '${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          cluster-name: '${MY_APP_PREFIX}-cluster'
          container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
          family: '${MY_APP_PREFIX}-service'
          requires:
            - aws-ecr/build-and-push-image