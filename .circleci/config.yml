# Ruby CircleCI 2.0 configuration file
#
# This configuration file sets up the continuous integration pipeline for a Ruby on Rails project.
# It includes steps for installing dependencies, setting up the database, and running tests.
#
version: 2.1

executors:
  # Defines a reusable environment for publishing Docker images.
  docker-publisher:
    environment:
      IMAGE_NAME: treatment-database-app
    docker:
      - image: docker:20.10.14-git

orbs:
  # Orbs are reusable snippets of code that can be shared across projects.
  # Here we use predefined orbs for Ruby, Node.js, browser tools, and Coveralls.
  ruby: circleci/ruby@2.1.1
  node: circleci/node@5.0.2
  browser-tools: circleci/browser-tools@1.4.7
  coveralls: coveralls/coveralls@1.0.6

jobs:
  build:
    docker:
      # Defines the primary Docker image to use in the build environment.
      - image: cimg/ruby:3.3.0-browsers

    environment:
      # Environment variables for Bundler and RSpec.
      BUNDLE_PATH: vendor/bundle
      BUNDLE_JOBS: 4
      BUNDLE_RETRY: 3
      RAILS_ENV: test
      RACK_ENV: test
      SPEC_OPTS: --profile 10 --format RspecJunitFormatter --out /tmp/test-results/rspec.xml --format progress
      # General working environment variables.
      WORKING_PATH: /tmp
      UPLOAD_PATH: /tmp
      CACHE_PATH: /tmp/cache
      # Enables Coveralls parallel build web notification.
      COVERALLS_PARALLEL: true


    working_directory: ~/treatment_database

    steps:
      - checkout
      - browser-tools/install-browser-tools

      # Restores Ruby dependencies from cache to speed up the build.
      - restore_cache:
          keys:
            - v1-ruby-dependencies-{{ checksum "Gemfile.lock" }}
            # Fallback to the latest cache for this branch
            - v1-ruby-dependencies-{{ .Branch }}-
            # General fallback
            - v1-ruby-dependencies-

      # Configures Bundler based on the Gemfile.lock version.
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"

      # Installs Ruby and system dependencies.
      - run:
          name: Install Dependencies
          no_output_timeout: 15m
          command: |
            bundle install
            sudo apt-get update
            sudo apt-get install xvfb libfontconfig wkhtmltopdf

      # Caches Ruby dependencies.
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-ruby-dependencies-{{ checksum "Gemfile.lock" }}

      # Restores JavaScript dependencies from cache.
      - restore_cache:
          keys:
            - v2-js-dependencies-{{ checksum "yarn.lock" }}
            - v2-js-dependencies-{{ .Branch }}-
            - v2-js-dependencies-

      # Installs JavaScript dependencies using Yarn.
      - run:
          name: Install JavaScript Dependencies
          command: yarn install

      # Builds JavaScript assets.
      - run:
          name: Build JavaScript Assets
          command: yarn build

      # Builds CSS assets.
      - run:
          name: Build CSS Assets
          command: yarn build:css

      # Caches JavaScript dependencies to speed up future builds.
      - save_cache:
          paths:
            - node_modules
          key: v2-js-dependencies-{{ checksum "yarn.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Runs static analysis tools.
      - run:
          name: Rubocop
          command: |
            gem install rubocop
            bundle exec rubocop --require rubocop-rails

      # Brakeman
      - run:
          name: Run Brakeman
          command: bundle exec brakeman -q -w 2

      # Bundler-audit
      - run:
          name: Install Bundler-audit
          command: gem install bundler-audit
      - run:
          name: Run Bundle-audit
          command: bundle exec bundle audit check --update

      # Executes tests in parallel
      # This step runs the RSpec tests across multiple containers to speed up the test suite.
      - run:
          name: Run rspec in parallel
          command: |
            mkdir /tmp/test-results
            bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            #bundle exec rspec --out /tmp/test-results/rspec.xml $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Uploads coverage data to Coveralls
      # This step is triggered once all parallel test jobs are finished.
      # It aggregates coverage data and uploads it to Coveralls for analysis and reporting.
      - coveralls/upload:
          parallel_finished: true
          path_to_lcov: /home/circleci/treatment_database/coverage/lcov/treatment_database.lcov

workflows:
  version: 2
  # Defines the workflow named "ci"
  ci:
    jobs:
      - build
